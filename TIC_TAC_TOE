#include <iostream>
#include <random>
#include <iomanip>
#include <algorithm>
using namespace std;
class Board {
protected:
    int n_rows{}, n_cols{};
    char** board{};
    int  n_moves = 0;
    int n_valid=0;
public:
    virtual bool update_board (int x, int y, char symbol) = 0;
    virtual bool is_draw() = 0;
    virtual bool  is_winner()=0;
    virtual void display_board() = 0;
    virtual bool game_is_over() = 0;
};
class Tic_Tac_Toe:public Board {
private:
    bool is_valid(int xx, int yy) {
        return xx >= 0 && xx < n_rows && yy >= 0 && yy < n_cols;
    }
    int count_valid(char c) {
        n_valid = 0;
        for (int i = 0; i < n_rows; ++i) {
            for (int j = 0; j < n_cols; ++j) {
                int nr = 1, nd = 1, ndi1 = 1, ndi2 = 1;
                if (board[i][j] == c) {
                    for (int k = 1; k <= 2; ++k) {
                        if (is_valid(i, j + k) && board[i][j + k] == c) {
                            nr++;
                        }
                    }
                    if (nr == 3) { n_valid++; }
                    for (int k = 1; k <= 2; ++k) {
                        if (is_valid(i + k, j) && board[i + k][j] == c) {
                            nd++;
                        }
                    }
                    if (nd == 3) { n_valid++; }
                    for (int k = 1; k <= 2; ++k) {
                        if (is_valid(i + k, j + k) && board[i + k][j + k] == c) {
                            ndi1++;
                        }
                    }
                    if (ndi1 == 3) { n_valid++; }

                    for (int k = 1; k <= 2; ++k) {
                        if (is_valid(i + k, j - k) && board[i + k][j - k] == c) {
                            ndi2++;
                        }
                    }
                    if (ndi2 == 3) { n_valid++; }
                }
            }
        }
        return n_valid;
    }

public:
    Tic_Tac_Toe() {
        n_rows = n_cols = 5;
        board = new char *[n_rows];
        for (int i = 0; i < n_rows; i++) {
            board[i] = new char[n_cols];
            for (int j = 0; j < n_cols; j++)
                board[i][j] = 0;
        }
    }

    bool update_board(int x, int y, char symbol) override {
        if (is_valid(x,y)&& (board[x][y] == 0)) {
            board[x][y] = symbol;
            n_moves++;
            return true;
        } else
            return false;
    }
    void display_board() override{
        for (int i=0;i<n_rows;i++) {
            cout << "\n| ";
            for (int j=0;j<n_cols;j++) {
                cout << "(" << i << "," << j << ")";
                cout << setw(2) << board[i][j]<< " |";
            }
            cout << "\n-----------------------------";
        }
        cout<<endl;
        }
    bool game_is_over() override{
        return (n_moves>=24);
    }
    bool  is_winner() override {
        int nx= count_valid('X'),ny= count_valid('O');
        if (nx> ny){
            return true;
        }
        else
            return false;
    }
    bool is_draw()override{
        if (count_valid('X')== count_valid('O'))
            return true;
        else
            return false;

    }
    ~Tic_Tac_Toe(){
        for (int i = 0; i < n_rows; ++i) {
            delete[] board[i];
        }
        delete[] board;
    }
};
class Player {
protected:
    string name;
    char symbol{};
public:
    Player (char symbol):symbol(symbol){}
      Player (int order, char sym) {
        cout << "Welcome player " << order << endl;
        cout << "Please enter your name: ";
        cin >> name;
        symbol = sym;
    }
    virtual void get_move(int& x, int& y){
        cout<<player_name()<<" ";
        cout << "\nPlease enter your move x and y (0 to 4) separated by spaces: ";
        cin >> x >> y;
    }
    string player_name() {
         return "Player: " + name ;
    }
    char get_symbol() const {
        return symbol;
    }
};
class RandomPlayer: public Player {
protected:
    int dimension=0;
public:
    RandomPlayer (char symbol, int dimension): Player(symbol){
        dimension = dimension;
        name = "Random Computer Player";
        cout << "My names is " << name << endl;
    }
    // Generate a random move
    void get_move(int& x, int& y) override{
        x = (int) (rand()/(RAND_MAX + 1.0) * dimension);
        y = (int) (rand()/(RAND_MAX + 1.0) * dimension);
    }
};
class GameManager {
private:
    Board* boardPtr;
    Player* players[2];
public:
    GameManager(Board* ptr, Player* playerPtr[2]):boardPtr(ptr){
        players[0]=playerPtr[0];
        players[1]=playerPtr[1];
    }
    void  run() {
        int x, y;
        boardPtr->display_board();
        while (!boardPtr->game_is_over()) {
            for (int i:{0,1}) {
                players[i]->get_move(x, y);
                while (!boardPtr->update_board (x, y, players[i]->get_symbol())){
                    cout<<"Not valid choise\n";
                    players[i]->get_move(x, y);
                }
                boardPtr->display_board();
                }
            }
        if (boardPtr->is_draw()){
            cout<<"DRAW!\n";
        }
        else if (boardPtr->is_winner()){
            cout  << players[0]->player_name() << " wins\n";
        }
        else if (!boardPtr->is_winner()){
            cout  << players[1]->player_name() << " wins\n";
        }
    }
};
int main(){
    int choice;
    Player* players[2];
    players[0] = new Player (1, 'X');
    cout << "Welcome to FCAI X-O Game. :)\n";
    cout << "Press 1 if you want to play with computer: ";
    cin >> choice;
    if (choice != 1)
        players[1] = new Player (2, 'O');
    else
        players[1] = new RandomPlayer ('O', 5);
    GameManager x_o_game (new Tic_Tac_Toe(), players);
    x_o_game.run();
    system ("pause");
}
